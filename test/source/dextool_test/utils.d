/**
Copyright: Copyright (c) 2015-2019, Joakim Brännström. All rights reserved.
License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0)
Author: Joakim Brännström (joakim.brannstrom@gmx.com)
*/
module dextool_test.utils;

import std.algorithm : map, joiner, filter, among;
import std.array : array;
import std.conv : text;
import std.exception : collectException, ErrnoException;
import std.file : mkdirRecurse, remove, dirEntries, SpanMode, exists;
import std.path : absolutePath, stripExtension, buildPath;
import std.process : escapeShellFileName, execute;
import std.range : isInputRange, only, lockstep, enumerate;
import std.stdio : File;
import std.string : strip, leftJustifier;
import std.typecons : Flag;
public import std.typecons : Yes, No;

import logger = std.experimental.logger;

enum dextoolExePath = "path_to_dextool/dextool_debug";

import dextool_test.builders : BuildCommandRun;
import dextool_test.types;

// backwards compatible logging.
alias yap = logger.info;

string buildArtifacts() @safe {
    return "build";
}

string gmockLib() @safe {
    return buildPath(buildArtifacts, "libgmock_gtest.a");
}

void syncMkdirRecurse(string p) nothrow {
    synchronized {
        try {
            mkdirRecurse(p);
        } catch (Exception e) {
        }
    }
}

/// Logs saved to "log.txt" in the test environment.
struct TestEnv {
    import std.ascii : newline;

    // the old thread local logger. Is replaced when the test env is terminated.
    private logger.Logger oldLog;

    private Path buildBase;
    private string outdir_;
    private string outdir_suffix;
    private Path dextool_;

    this(Path dextool) {
        this.dextool_ = dextool;
        this.buildBase = buildArtifacts;
    }

    Path outdir() const {
        return buildPath(buildBase.toString, outdir_, outdir_suffix).Path;
    }

    Path dextool() const {
        return dextool_;
    }

    string toString() {
        return only("dextool: " ~ dextool.toString, "outdir: " ~ outdir.toString).joiner(newline)
            .text;
    }

    void setOutput(string outdir__) {
        this.outdir_ = outdir__;
    }

    /** Setup the test environment
     *
     * Example of using the outputSuffix.
     * ---
     * mixin(envSetup(globalTestdir, No.setupEnv));
     * testEnv.outputSuffix("foo");
     * testEnv.setupEnv;
     * ---
     */
    void outputSuffix(string suffix) {
        this.outdir_suffix = suffix;
    }

    void setupEnv() {
        syncMkdirRecurse(outdir.toString);
        cleanOutdir;

        // change the thread local logger for the duration of the test
        oldLog = logger.stdThreadLocalLog;
        logger.stdThreadLocalLog = new logger.FileLogger(buildPath(outdir.toString, "log.txt"));

        logger.info("Test environment:");
        logger.info(toString);
    }

    void cleanOutdir() nothrow {
        const string[] files = () {
            try {
                return dirEntries(outdir.toString, SpanMode.depth).filter!(a => a.isFile)
                    .map!(a => a.name)
                    .array();
            } catch (Exception e) {
            }
            return null;
        }();

        foreach (a; files) {
            remove(a).collectException;
        }
    }

    void setup(string outdir__) {
        setOutput(outdir__);
        setupEnv;
    }

    void teardown() {
        logger.stdThreadLocalLog = oldLog;
    }
}

//TODO deprecated, use envSetup instead.
string EnvSetup(string logdir) {
    return envSetup(logdir, Yes.setupEnv);
}

string envSetup(string logdir, Flag!"setupEnv" setupEnv = Yes.setupEnv) {
    import std.format : format;

    auto txt = `
    import std.file : chdir, thisExePath;
    import std.path : dirName, stripExtension;
    import dextool_test.types : Path;

    auto testEnv = TestEnv(Path("%s"));

    // Setup and cleanup
    scope (exit) {
        testEnv.teardown();
    }
    chdir(thisExePath.dirName);

    {
        import std.path : buildPath;
        import std.traits : fullyQualifiedName;
        int _ = 0;
        testEnv.setOutput(buildPath("%s", fullyQualifiedName!_).stripExtension);
    }
`;

    txt = format(txt, dextoolExePath, logdir);

    if (setupEnv) {
        txt ~= "testEnv.setupEnv();";
    }

    return txt;
}

struct GR {
    Path gold;
    Path result;
}

auto removeJunk(R)(R r, Flag!"skipComments" skipComments) {
    import std.algorithm : filter;
    import std.range : tee;

    // dfmt off
    return r
        // remove comments
        .filter!(a => !skipComments || !(a.value.strip.length > 2 && a.value.strip[0 .. 2] == "//"))
        // remove the line with the version
        .filter!(a => !(a.value.length > 39 && a.value[0 .. 39] == "/// @brief Generated by dextool version"))
        .filter!(a => !(a.value.length > 32 && a.value[0 .. 32] == "/// Generated by dextool version"))
        // remove empty lines
        .filter!(a => a.value.strip.length != 0);
    // dfmt on
}

/** Sorted compare of gold and result.
 *
 * TODO remove this function when all tests are converted to using BuildCompare.
 *
 * max_diff is arbitrarily chosen to 5.
 * The purpose is to limit the amount of text that is dumped.
 * The reasoning is that it is better to give more than one line as feedback.
 */
deprecated("to be removed") void compare(in Path gold, in Path result,
        Flag!"sortLines" sortLines, Flag!"skipComments" skipComments = Yes.skipComments) {
    yap("Comparing gold:", gold);
    yap("        result:", result);

    File goldf;
    File resultf;

    try {
        goldf = File(gold.toString);
        resultf = File(result.toString);
    } catch (ErrnoException ex) {
        throw new ErrorLevelException(-1, ex.msg);
    }

    auto maybeSort(T)(T lines) {
        import std.array : array;
        import std.algorithm : sort;

        if (sortLines) {
            return sort!((a, b) => a[1] < b[1])(lines.array()).array();
        }

        return lines.array();
    }

    bool diff_detected = false;
    immutable max_diff = 5;
    int accumulated_diff;
    // dfmt off
    foreach (g, r;
             lockstep(maybeSort(goldf
                                .byLineCopy()
                                .enumerate
                                .removeJunk(skipComments)),
                      maybeSort(resultf
                                .byLineCopy()
                                .enumerate
                                .removeJunk(skipComments))
                      )) {
        if (g[1] != r[1] && accumulated_diff < max_diff) {
            // +1 of index because editors start counting lines from 1
            yap("Line ", g[0] + 1, " gold:", g[1]);
            yap("Line ", r[0] + 1, "  out:", r[1], "\n");
            diff_detected = true;
            ++accumulated_diff;
        }
    }
    // dfmt on

    //TODO replace with enforce
    if (diff_detected) {
        yap("Output is different from reference file (gold): ", gold);
        throw new ErrorLevelException(-1,
                "Output is different from reference file (gold): " ~ gold.toString);
    }
}

/// Check if a log contains the fragment txt.
bool sliceContains(string log, string txt) {
    import std.string : indexOf;

    return log.indexOf(txt) != -1;
}

/// Check if a log contains the fragment txt.
bool sliceContains(string[] log, string txt) {
    import std.string : indexOf;

    return log.joiner.array.indexOf(txt) != -1;
}

/// Check if the log contains the input range.
bool sliceContains(T)(const string[] log, const T gold_lines) if (isInputRange!T) {
    import std.array : array;
    import std.range : enumerate;
    import std.string : indexOf;
    import std.traits : isArray;

    enum ContainState {
        NotFoundFirstLine,
        Comparing,
        BlockFound,
        BlockNotFound
    }

    ContainState state;

    auto result_lines = log;
    size_t gold_idx, result_idx;

    while (!state.among(ContainState.BlockFound, ContainState.BlockNotFound)) {
        string result_line;
        // ensure it doesn't do an out-of-range indexing
        if (result_idx < result_lines.length) {
            result_line = result_lines[result_idx];
        }

        switch (state) with (ContainState) {
        case NotFoundFirstLine:
            if (result_line.indexOf(gold_lines[0].strip) != -1) {
                state = Comparing;
                ++gold_idx;
            } else if (result_lines.length == result_idx) {
                state = BlockNotFound;
            }
            break;
        case Comparing:
            if (gold_lines.length == gold_idx) {
                state = BlockFound;
            } else if (result_lines.length == result_idx) {
                state = BlockNotFound;
            } else if (result_line.indexOf(gold_lines[gold_idx].strip) == -1) {
                state = BlockNotFound;
            } else {
                ++gold_idx;
            }
            break;
        default:
        }

        if (state == ContainState.BlockNotFound && result_lines.length == result_idx) {
            yap("Error: log do not contain the reference lines");
            yap(" Expected: " ~ gold_lines[0]);
        } else if (state == ContainState.BlockNotFound) {
            yap("Error: Difference from reference. Line ", gold_idx);
            yap(" Expected: " ~ gold_lines[gold_idx]);
            yap("   Actual: " ~ result_line);
        }

        if (state.among(ContainState.BlockFound, ContainState.BlockNotFound)) {
            break;
        }

        ++result_idx;
    }

    return state == ContainState.BlockFound;
}

/** Run dextool.
 *
 * Return: The runtime in ms.
 */
deprecated("to be removed") auto runDextool(T)(in T input,
        const ref TestEnv testEnv, in string[] pre_args, in string[] flags) {
    import std.traits : isArray;

    string[] args;
    args ~= testEnv.dextool.toString;
    args ~= pre_args.dup;
    args ~= ["--out", testEnv.outdir.toString];

    static if (isArray!T) {
        foreach (f; input) {
            args ~= ["--in", f.toString];
        }
    } else {
        args ~= ["--in", input.toString];
    }

    if (flags.length > 0) {
        args ~= "--";
        args ~= flags.dup;
    }

    import std.datetime;

    StopWatch sw;
    sw.start;
    auto output = execute(args);
    sw.stop;
    logger.info("Dextool execution time was ms: " ~ sw.peek().msecs.text);
    logger.info(output.output);

    if (output.status != 0) {
        throw new ErrorLevelException(output.status, output.output);
    }

    return output.output;
}

/** Construct an execution of dextool with needed arguments.
 */
auto makeDextool(const ref TestEnv testEnv) {
    import dextool_test.builders : BuildDextoolRun;

    return BuildDextoolRun(testEnv.dextool, testEnv.outdir);
}

/** Construct an execution of a command.
 */
auto makeCommand(string command) {
    return BuildCommandRun(command);
}

/** Construct an execution of a command.
 */
auto makeCommand(const ref TestEnv testEnv, string command) {
    return BuildCommandRun(command, testEnv.outdir);
}

auto makeCompare(const ref TestEnv env) {
    import dextool_test.golden : BuildCompare;

    return BuildCompare(env.outdir);
}

deprecated("to be removed") void compareResult(T...)(Flag!"sortLines" sortLines,
        Flag!"skipComments" skipComments, in T args) {
    static assert(args.length >= 1);

    foreach (a; args) {
        if (exists(a.gold.toString)) {
            compare(a.gold, a.result, sortLines, skipComments);
        }
    }
}

string testId(uint line = __LINE__) {
    import std.conv : to;

    // assuming it is always the UDA for a test and thus +1 to get the correct line
    return "id:" ~ (line + 1).to!string() ~ " ";
}

/**
 * Params:
 *  dir = directory to perform the recursive search in
 *  ext = extension of the files to match (including dot)
 *
 * Returns: a list of all files with the extension
 */
auto recursiveFilesWithExtension(Path dir, string ext) {
    import std.file : dirEntries, SpanMode;
    import std.algorithm : filter, map;
    import std.path : extension;

    // dfmt off
    return dirEntries(dir.toString, SpanMode.depth)
        .filter!(a => a.isFile)
        .filter!(a => extension(a.name) == ext)
        .map!(a => Path(a));
    // dfmt on
}

/// Shallow copy the content while keeping the executable bit from `src` to `dst`.
void dirContentCopy(string src, string dst) {
    import std.algorithm;
    import std.file;
    import std.path;
    import core.sys.posix.sys.stat;

    assert(src.isDir);
    assert(dst.isDir);

    foreach (f; dirEntries(src, SpanMode.shallow).filter!"a.isFile") {
        auto dst_f = buildPath(dst, f.name.baseName);
        copy(f.name, dst_f);
        auto attrs = getAttributes(f.name);
        if (attrs & S_IXUSR)
            setAttributes(dst_f, attrs | S_IXUSR);
    }
}
